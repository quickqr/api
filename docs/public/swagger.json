{
  "swagger": "2.0",
  "info": {
      "description": "Quick QR is an API for creating QR codes focused on customization.\n\n### Features:\n- Setting background and foreground colors\n- Gradient for foreground color with variable direction\n- Customizing shapes for QR code modules and finders, setting space between modules\n- Embedding logo in QR code: send either a URL, or raw base64 encoded file\n- And other \n\n",
      "title": "Quick QR API",
      "contact": {
          "url": "https://gitlab.com/quickqr"
      },
      "version": "0.0.0"
  },
  "basePath": "/api/",
  "paths": {
    "/v1/generate": {
      "post": {
          "description": "### Data\n\n`data` can be any string with the length less than 2953 bytes, it's the maximum value that QR code can store\n\n#### Colors\n\n`backgroundColor` and `foregroundColor` are the hex RGB representation. The length of the color is either 3 or 6.  \nValid examples: `#fff`, `#1f1f1f`\n\n### Size\n\n`size` controls size of the image with QR code, not the actual QR code.\n\n### Quiet Zone\n\n`quietZone` is the space between the edge of an image and the edge of a QR-code.\n\u003e Note: with bigger quiet zone, fewer space left for the actual QR code, so it'll appear smaller\n \n### Styling\n\nYou can style QR code via `finder`, `module` and `gap` values. See reference below\n\n### Gradients\n\nGradient is set up via `gradientDirection` and `gradientColors` variables (see more in docs below)\n\n### Logo\n\nLogo in the center of QR code is controlled by `logo` and `logoScale` fields.  \n`logo` can be either base64 encoded image or URL to the image. Valid image types: PNG or JPEG.\n\n`logoSpace` adds space around logo, QR code will look cleaner\n\n### Recovery Levels\n\nRecovery Levels control how much data will be used to duplicate data.\n\u003e Note: with higher recovery level, you get more chance that QR code will be scanned even if corrupted.\n\n### Version\n\nYou can force version (and max capacity, then) with `version.`\n\u003e Be aware of errors if data overflows max capacity of supplied version",
          "consumes": [
              "application/json"
          ],
          "produces": [
              "image/png"
          ],
          "summary": "Generate customizable QR code",
          "parameters": [
              {
                  "description": "Configuration for QR code generator. Default values are showed below",
                  "name": "request",
                  "in": "body",
                  "required": true,
                  "schema": {
                      "$ref": "#/definitions/v1_api.generateBody"
                  }
              }
          ],
          "responses": {
              "201": {
            "description": "Will return generated QR code as PNG",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/v1_api.errorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "v1_api.errorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "You messed up!"
        }
      }
    },
    "v1_api.generateBody": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
          "backgroundColor": {
              "description": "Color of the background for the image",
              "type": "string",
              "default": "#ffffff",
              "example": "#ffffff"
          },
          "data": {
              "description": "Data that will be encoded inside the QR code",
              "type": "string",
              "example": "Hello, world"
          },
          "finder": {
              "description": "Controls how the finders on QR code will look",
              "type": "string",
              "default": "square",
              "enum": [
                  "square",
                  "rounded",
                  "circle"
              ]
          },
          "foregroundColor": {
              "description": "Color of QR blocks",
              "type": "string",
              "default": "#000000",
              "example": "#000000"
          },
          "gap": {
              "description": "Controls padding between modules in percents relative to module size",
              "type": "integer",
              "default": 0,
              "maximum": 50,
              "minimum": 0
          },
          "gradientColors": {
              "description": "List of colors to place in specified direction. Every value should be hex color",
              "type": "array",
              "minItems": 2,
              "items": {
                  "type": "string"
              }
          },
          "gradientDirection": {
              "description": "Gradient direction. 0 for left to right (default), 1 for right to left",
              "type": "integer",
              "maximum": 1,
              "minimum": 0
          },
          "logo": {
              "description": "Image to put at the center of QR code",
              "type": "string",
              "example": "base64 string or URL to image"
          },
          "logoSpace": {
              "description": "Adds space around logo, image will look more clear",
              "type": "boolean",
              "default": false,
              "example": true
          },
          "module": {
              "description": "Controls how modules on QR code will look",
              "type": "string",
              "default": "square",
              "enum": [
                  "square",
                  "rounded",
                  "circle"
              ]
          },
          "quietZone": {
              "description": "Defines size of the quiet zone for the QR code. With bigger border size, the actual size of QR code makes smaller",
              "type": "integer",
              "default": 30,
              "example": 30
          },
          "recoveryLevel": {
              "description": "How much error correction data will be embedded to QR code.",
              "type": "string",
              "default": "medium",
              "enum": [
                  "low",
                  "medium",
                  "high",
                  "highest"
              ],
              "example": "medium"
          },
          "size": {
              "description": "Defines the size of the produced image in pixels",
              "type": "integer",
              "default": 512,
              "minimum": 128,
              "example": 512
          },
          "version": {
              "description": "Forced version for generated QR code. 0 means automatic",
              "type": "integer",
              "default": 0,
              "maximum": 40,
              "minimum": 0,
              "example": 14
          }
      }
    }
  }
}